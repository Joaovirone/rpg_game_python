# üß≠ Guia de Prefixos para Commits (Conventional Commits)

Padronizar suas mensagens de commit ajuda a manter o hist√≥rico do projeto limpo, organizado e f√°cil de entender.

Abaixo est√£o os principais **prefixos** e seus significados:

---

| Prefixo | Tipo de Mudan√ßa | Quando Usar | Exemplo de Uso |
|----------|------------------|--------------|----------------|
| **feat:** | Nova funcionalidade | Sempre que voc√™ adiciona algo novo ao c√≥digo ou projeto | `feat: adicionar componente de login` |

| **fix:** | Corre√ß√£o de erro | Quando voc√™ corrige um bug ou erro existente | `fix: corrigir erro de autentica√ß√£o` |

| **docs:** | Documenta√ß√£o | Quando altera ou adiciona README, coment√°rios, docs etc | `docs: atualizar instru√ß√µes de instala√ß√£o` |

| **style:** | Estilo (sem alterar funcionalidade) | Ajustes visuais, formata√ß√£o, espa√ßos, v√≠rgulas etc | `style: formatar c√≥digo com prettier` |

| **refactor:** | Refatora√ß√£o de c√≥digo | Quando melhora o c√≥digo sem mudar o comportamento | `refactor: otimizar fun√ß√£o de login` |

| **perf:** | Melhoria de performance | Quando torna o sistema mais r√°pido ou eficiente | `perf: melhorar tempo de carregamento da p√°gina` |

| **test:** | Testes | Quando cria, ajusta ou remove testes | `test: adicionar testes para componente de login` |

| **chore:** | Tarefas de manuten√ß√£o | Mudan√ßas que n√£o afetam o c√≥digo de produ√ß√£o (build, depend√™ncias, configs) | `chore: atualizar depend√™ncias do projeto` |

| **build:** | Processo de build ou depend√™ncias | Quando muda algo que afeta o build (webpack, npm, vite, etc) | `build: adicionar configura√ß√£o do webpack` |

| **ci:** | Integra√ß√£o cont√≠nua | Quando altera pipelines, GitHub Actions, etc | `ci: ajustar workflow de deploy no GitHub Actions` |

| **revert:** | Reverter commit anterior | Quando desfaz uma altera√ß√£o anterior | `revert: reverter commit 4f2a1b7` |

---

## üí° Dicas de Boas Pr√°ticas

- Sempre use **letras min√∫sculas** nos prefixos.  
- Use o **imperativo** na mensagem (ex: "adicionar", n√£o "adicionado").  
- Mantenha a mensagem curta e direta.  
- Evite commits gen√©ricos como `update` ou `changes`.

---

## üß© Exemplo de Fluxo de Trabalho

```bash
# Atualizar a branch main
git checkout main
git pull origin main

# Voltar para sua branch
git checkout minha-branch

# Mesclar com a main atualizada
git merge main

# Adicionar e comitar mudan√ßas
git add .
git commit -m "feat: adicionar bot√£o de logout"

# Enviar para o reposit√≥rio remoto
git push origin minha-branch
